/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.ts":
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
/***/ (() => {

eval("const staticData = './data/data.json';\nconst matchRanges = [\n    { min: 0, max: 69, color: \"red\", copy: \"very weak\" },\n    { min: 70, max: 79, color: \"orange\", copy: \"somewhat weak\" },\n    { min: 80, max: 89, color: \"yellow\", copy: \"somewhat strong\" },\n    { min: 90, max: 100, color: \"green\", copy: \"very strong\" }\n];\nfetch(staticData)\n    .then(response => response.json())\n    .then((series) => {\n    const seriesArr = series['series'];\n    seriesArr.sort((a, b) => {\n        if (a.match < b.match) {\n            return 1;\n        }\n        if (a.match > b.match) {\n            return -1;\n        }\n        return 0;\n    });\n    console.log(seriesArr);\n    const topSeriesList = document.querySelector('#top-series-list');\n    if (topSeriesList) {\n        const top10 = seriesArr.slice(0, 10);\n        top10.forEach((series, i) => {\n            let html = `\n                <li>\n                    <a href=\"#series-${i}\" class=\"usa-link series-name\">${series.gsNumber} | ${series.gsName}</a>\n                </li>\n                `;\n            topSeriesList.innerHTML += html;\n        });\n    }\n    const seriesContainer = document.querySelector('#data');\n    if (seriesContainer) {\n        seriesArr.forEach((series, i) => {\n            // Get the match number for the series\n            let match = series.match;\n            // Find the color range that match falls into\n            let matchRange = matchRanges.find(range => match >= range.min && match <= range.max);\n            // Get the color class from the color range, or a default class if no range is found\n            let matchColor = matchRange ? matchRange.color : \"\";\n            let matchCopy = matchRange ? matchRange.copy : \"\";\n            let html = `\n                <div class=\"grid-row grid-gap result\" id=\"series-${i}\">\n                    <div class=\"tablet:grid-col-3 match bg-blue text-align-right\">\n                        <h2 class=\"match-number match-color-${matchColor}\">${series.match}% Match</h2>\n                        <p class=\"usa-prose\">Your interests have a <strong class=\"match-color-${matchColor}\">${matchCopy} alignment</strong> with jobs in this series</p>\n                    </div>\n                    <div class=\"tablet:grid-col series\">\n                        <div class=\"series-detail\">\n                            <h2><span class=\"series-name\">${series.gsName}</span><span>${series.gsNumber}</span></h2>\n                            <p class=\"usa-prose\">${series.gsDescription}</p>\n                        </div>\n                        <div class=\"series-actions\">\n                            <div class=\"usa-button-group\">\n                                <a href=\"#\" class=\"usa-button usa-button--outline\">Explore related series</a>\n                                <a href=\"#\" class=\"usa-button\">Search this series on USAJOBS</a>\n                            </div>\n                        </div>\n                        <div class=\"series-jobs\">\n                            <h3>Common job titles for the <span class=\"series-name\">${series.gsName}</span></h3>\n                            <div class=\"usa-accordion usa-accordion--bordered usa-accordion--multiselectable\" data-allow-multiple>\n                                ${series.jobs.map((job, i) => `\n                                <h4 class=\"usa-accordion__heading\">\n                                    <button type=\"button\" class=\"usa-accordion__button\" ${(i === 0) ? 'aria-expanded=\"true\"' : 'aria-expanded=\"false\"'} aria-controls=\"a${job.jobId}\">${job.jobName}</button>\n                                </h4>\n                                <div id=\"a${job.jobId}\" class=\"usa-accordion__content\" ${(i === 0) ? '' : 'hidden'}>\n                                    <p class=\"usa-prose\">${job.jobDescription}</p>\n                                </div>\n                                `).join('')}\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                `;\n            seriesContainer.innerHTML += html;\n        });\n    }\n})\n    .then(() => {\n    const results = document.querySelectorAll('.result');\n    // Get the prev and next buttons\n    const prevButton = document.querySelector('#prev');\n    const nextButton = document.querySelector('#next');\n    // Function to find the index of the element in the viewport\n    function findCurrentIndex() {\n        let minDistance = Number.MAX_SAFE_INTEGER;\n        let closestIndex = 0;\n        results.forEach((result, index) => {\n            let distance = Math.abs(result.getBoundingClientRect().top);\n            if (distance < minDistance) {\n                closestIndex = index;\n                minDistance = distance;\n            }\n        });\n        return closestIndex;\n    }\n    // Add event listener for the prev button\n    prevButton.addEventListener('click', function () {\n        let currentIndex = findCurrentIndex();\n        // Only decrement the index if it's not already at 0\n        if (currentIndex > 0) {\n            currentIndex--;\n            // Scroll to the new current element\n            results[currentIndex].scrollIntoView({ behavior: \"smooth\" });\n        }\n    });\n    // Add event listener for the next button\n    nextButton.addEventListener('click', function () {\n        let currentIndex = findCurrentIndex();\n        // Only increment the index if it's not already at the last element\n        if (currentIndex < results.length - 1) {\n            currentIndex++;\n            // Scroll to the new current element\n            results[currentIndex].scrollIntoView({ behavior: \"smooth\" });\n        }\n    });\n})\n    .catch(error => console.error('Error:', error));\n// document.addEventListener('DOMContentLoaded', function () {\n// });\n\n\n//# sourceURL=webpack://jet-prototype-v2/./src/index.ts?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/index.ts"]();
/******/ 	
/******/ })()
;